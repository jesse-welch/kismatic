---
    # kubeconfig is required becuase this task can be triggered from any k8s node
  - name: wait up to 5 min until pod '{{ item }}' has the desired version
    command: kubectl get pods {{ item }} --namespace kube-system -o jsonpath='{.metadata.annotations.kismatic/version}' --kubeconfig {{ kubernetes_kubeconfig_path }}
    register: podVersion
    until: podVersion.stdout == kismatic_short_version
    retries: 60
    delay: 5
    failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)

  - name: fail if pod '{{ item }}' does not have the desired version
    fail:
      msg: "The pod '{{ item }}' is expected to have version '{{ kismatic_short_version }}', but it has version '{{ podVersion.stdout }}'."
    when: podVersion|failure or podVersion.stdout != kismatic_short_version

  - name: wait up to 5 min until pod '{{ item }}' is running
    command: kubectl get pods {{ item }} --namespace kube-system --kubeconfig {{ kubernetes_kubeconfig_path }}
    register: phase
    until: phase|success and "Running" in phase.stdout
    retries: 60
    delay: 5
    failed_when: false # We don't want this task to actually fail (We catch the failure with a custom msg in the next task)

  - name: get docker container ID for {{ item }}
    command: docker ps -a -f name={{ item }} --format {%raw%}"{{.ID}}"{%endraw%} -l
    register: containerID
    when: phase|failure or "Running" not in phase.stdout

  - name: get docker logs for {{ item }}
    command: docker logs {{ containerID.stdout }} --tail 15
    register: docker_logs
    when: containerID is defined and containerID|success and containerID.stdout is defined and containerID.stdout != ""

  - name: fail if {{ item }} pod is not running
    fail:
      msg: |
        Waited for pod '{{ item }}' to be running, but it did not start up in time.

        The pod's latest logs may indicate why it failed to start up:

        {{ docker_logs.stderr }}

    when: phase|failure or "Running" not in phase.stdout
